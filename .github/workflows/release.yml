name: Release - Python Package with uv

on:
  push:
    branches:
      - main

permissions:
  contents: write  # push tags/commits & create releases

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0   # fetch all history & tags

      - name: Install uv (latest release)
        run: |
          wget -qO- https://astral.sh/uv/install.sh | sh
          uv --version

      - name: Install Python 3.12 with uv and create venv
        run: |
          uv python install 3.12
          uv venv
          echo "âœ… Virtual environment created at .venv"

      - name: Sync dependencies
        run: |
          source .venv/bin/activate
          uv sync

      - name: Run tests with coverage
        run: |
          source .venv/bin/activate
          uv pip install coverage
          coverage run -m unittest discover -s tests -v
          mkdir -p coverage_reports
          coverage xml -o coverage_reports/coverage.xml
          coverage report -m

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          slug: SoftwareVerse/userverse-python-client
          files: coverage_reports/coverage.xml
          fail_ci_if_error: true

      - name: Determine Version Bump
        id: version
        run: |
          bump="patch"
          message=$(git log -1 --pretty=%B)
          if echo "$message" | grep -iqE '\[major\]'; then
            bump="major"
          elif echo "$message" | grep -iqE '\[minor\]'; then
            bump="minor"
          fi
          echo "bump=$bump" >> "$GITHUB_OUTPUT"

      - name: Get Latest Tag
        id: get_tag
        run: |
          git fetch --tags --force
          latest_tag=$(git tag --sort=-v:refname | head -n 1)
          echo "tag=${latest_tag}" >> "$GITHUB_OUTPUT"

      - name: Calculate Next Version
        id: semver
        run: |
          current=${{ steps.get_tag.outputs.tag }}
          if [ -z "$current" ]; then current="v0.1.0"; fi

          IFS='.' read -r major minor patch <<<"${current#v}"
          bump=${{ steps.version.outputs.bump }}

          case "$bump" in
            major) new_version="$((major + 1)).0.0" ;;
            minor) new_version="$major.$((minor + 1)).0" ;;
            patch) new_version="$major.$minor.$((patch + 1))" ;;
          esac

          echo "new_version=$new_version" >> "$GITHUB_OUTPUT"

      - name: Update version in pyproject.toml
        run: |
          new_version=${{ steps.semver.outputs.new_version }}
          sed -i -E '/^\[project\]/,/^\[.*\]/ s/^version = ".*"/version = "'"$new_version"'"/' pyproject.toml
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git commit -am "chore: bump version to v${new_version}" || echo "No changes to commit"

      - name: Create Git Tag
        run: |
          new_tag="v${{ steps.semver.outputs.new_version }}"
          git tag -a "$new_tag" -m "Release $new_tag"
          git push origin main
          git push origin "$new_tag"

      - name: Build package
        run: |
          source .venv/bin/activate
          uv build

      - name: Publish to PyPI
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          source .venv/bin/activate
          uv publish --username __token__ --password ${{ secrets.PYPI_TOKEN }}

      - name: Create GitHub Release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          new_tag="v${{ steps.semver.outputs.new_version }}"
          gh release create "$new_tag" --title "$new_tag" --notes "Automated release for $new_tag"
